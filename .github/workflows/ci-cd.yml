name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          PYTHONPATH=src pytest tests/

      - name: Build Docker image
        run: |
          docker build -t heart-disease:ci .

      - name: Save Docker image as artifact
        run: |
          docker save heart-disease:ci -o image.tar
        # Сохраняем образ как артефакт
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  publish:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load -i image.tar
          docker tag heart-disease:ci ghcr.io/${{ github.repository }}:latest

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}:latest 

  ycr-push:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Debug secrets
        run: |
          echo "Registry ID: ${{ secrets.YC_REGISTRY_ID }}"
          echo "Image Name: ${{ secrets.YC_IMAGE_NAME }}"

      - name: Load Docker image
        run: |
          docker load -i image.tar
          docker tag heart-disease:ci cr.yandex/${{ secrets.YC_REGISTRY_ID }}/${{ secrets.YC_IMAGE_NAME }}:latest

      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "${HOME}/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Authorize in Yandex Cloud
        run: |
          echo '${{ secrets.YC_SA_JSON }}' > key.json
          yc config set service-account-key key.json
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

      - name: Login to Yandex Container Registry
        run: |
          yc container registry configure-docker

      - name: Push Docker image to YCR
        run: |
          docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/${{ secrets.YC_IMAGE_NAME }}:latest

  deploy-serverless:
    needs: ycr-push
    runs-on: ubuntu-latest

    steps:
      - name: Install Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "${HOME}/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Authorize in Yandex Cloud
        run: |
          echo '${{ secrets.YC_SA_JSON }}' > key.json
          yc config set service-account-key key.json
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

      - name: Deploy new revision to Serverless Container
        run: |
          yc serverless container revision deploy \
            --container-id ${{ secrets.YC_CONTAINER_ID }} \
            --image cr.yandex/${{ secrets.YC_REGISTRY_ID }}/${{ secrets.YC_IMAGE_NAME }}:latest \
            --service-account-id ${{ secrets.YC_RUNTIME_SA_ID }} \
            --cores 1 --memory 512M --execution-timeout 30s 